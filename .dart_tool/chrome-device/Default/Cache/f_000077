define(['dart_sdk', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/painting/strut_style.dart'], (function load__packages__material_floating_search_bar__src__search_bar_style_dart(dart_sdk, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__painting__strut_style$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  var search_bar_style = Object.create(dart.library);
  var $hashCode = dartx.hashCode;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    _: () => T
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "file:///C:/Users/dhruv/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/material_floating_search_bar-0.3.4/lib/src/search_bar_style.dart",
    "package:material_floating_search_bar/src/search_bar_style.dart"
  ];
  var backgroundColor$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.backgroundColor");
  var shadowColor$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.shadowColor");
  var backdropColor$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.backdropColor");
  var padding$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.padding");
  var insets$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.insets");
  var margins$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.margins");
  var height$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.height");
  var elevation$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.elevation");
  var border$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.border");
  var borderRadius$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.borderRadius");
  var maxWidth$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.maxWidth");
  var openMaxWidth$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.openMaxWidth");
  var axisAlignment$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.axisAlignment");
  var openAxisAlignment$ = dart.privateName(search_bar_style, "FloatingSearchBarStyle.openAxisAlignment");
  search_bar_style.FloatingSearchBarStyle = class FloatingSearchBarStyle extends core.Object {
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get shadowColor() {
      return this[shadowColor$];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    get backdropColor() {
      return this[backdropColor$];
    }
    set backdropColor(value) {
      super.backdropColor = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get insets() {
      return this[insets$];
    }
    set insets(value) {
      super.insets = value;
    }
    get margins() {
      return this[margins$];
    }
    set margins(value) {
      super.margins = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get elevation() {
      return this[elevation$];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      super.border = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get maxWidth() {
      return this[maxWidth$];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get openMaxWidth() {
      return this[openMaxWidth$];
    }
    set openMaxWidth(value) {
      super.openMaxWidth = value;
    }
    get axisAlignment() {
      return this[axisAlignment$];
    }
    set axisAlignment(value) {
      super.axisAlignment = value;
    }
    get openAxisAlignment() {
      return this[openAxisAlignment$];
    }
    set openAxisAlignment(value) {
      super.openAxisAlignment = value;
    }
    scaleTo(b, t) {
      if (b == null) dart.nullFailed(I[0], 39, 57, "b");
      if (t == null) dart.nullFailed(I[0], 39, 67, "t");
      return new search_bar_style.FloatingSearchBarStyle.new({height: dart.nullCheck(ui.lerpDouble(this.height, b.height, t)), elevation: dart.nullCheck(ui.lerpDouble(this.elevation, b.elevation, t)), maxWidth: b.maxWidth == null ? null : ui.lerpDouble(this.maxWidth, b.maxWidth, t), openMaxWidth: b.openMaxWidth == null ? null : ui.lerpDouble(this.openMaxWidth, b.openMaxWidth, t), axisAlignment: dart.nullCheck(ui.lerpDouble(this.axisAlignment, b.axisAlignment, t)), openAxisAlignment: dart.nullCheck(ui.lerpDouble(this.openAxisAlignment, b.openAxisAlignment, t)), backgroundColor: dart.nullCheck(ui.Color.lerp(this.backgroundColor, b.backgroundColor, t)), backdropColor: dart.nullCheck(ui.Color.lerp(this.backdropColor, b.backdropColor, t)), shadowColor: dart.nullCheck(ui.Color.lerp(this.shadowColor, b.shadowColor, t)), insets: dart.nullCheck(edge_insets.EdgeInsets.lerp(this.insets, b.insets, t)), margins: dart.nullCheck(edge_insets.EdgeInsets.lerp(this.margins, b.margins, t)), padding: dart.nullCheck(edge_insets.EdgeInsets.lerp(this.padding, b.padding, t)), border: borders.BorderSide.lerp(this.border, b.border, t), borderRadius: dart.nullCheck(border_radius.BorderRadius.lerp(this.borderRadius, b.borderRadius, t))});
    }
    toString() {
      return "FloatingSearchBarStyle(backgroundColor: " + dart.str(this.backgroundColor) + ", shadowColor: " + dart.str(this.shadowColor) + ", padding: " + dart.str(this.padding) + ", insets: " + dart.str(this.insets) + ", height: " + dart.str(this.height) + ", elevation: " + dart.str(this.elevation) + ", backdropColor: " + dart.str(this.backdropColor) + ", border: " + dart.str(this.border) + ", borderRadius: " + dart.str(this.borderRadius) + ", margins: " + dart.str(this.margins) + ", maxWidth: " + dart.str(this.maxWidth) + ", openMaxWidth: " + dart.str(this.openMaxWidth) + ", axisAlignment: " + dart.str(this.axisAlignment) + ", openAxisAlignment: " + dart.str(this.openAxisAlignment) + ")";
    }
    _equals(o) {
      if (o == null) return false;
      if (this === o) return true;
      return search_bar_style.FloatingSearchBarStyle.is(o) && dart.equals(o.backgroundColor, this.backgroundColor) && dart.equals(o.shadowColor, this.shadowColor) && dart.equals(o.padding, this.padding) && dart.equals(o.insets, this.insets) && o.height == this.height && o.elevation == this.elevation && dart.equals(o.backdropColor, this.backdropColor) && dart.equals(o.border, this.border) && dart.equals(o.borderRadius, this.borderRadius) && dart.equals(o.margins, this.margins) && o.maxWidth == this.maxWidth && o.openMaxWidth == this.openMaxWidth && o.axisAlignment == this.axisAlignment && o.openAxisAlignment == this.openAxisAlignment;
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.backgroundColor)) ^ dart.notNull(dart.hashCode(this.shadowColor)) ^ dart.notNull(dart.hashCode(this.padding)) ^ dart.notNull(dart.hashCode(this.insets)) ^ dart.hashCode(this.height) ^ dart.hashCode(this.elevation) ^ dart.notNull(dart.hashCode(this.backdropColor)) ^ dart.notNull(dart.hashCode(this.border)) ^ dart.notNull(dart.hashCode(this.borderRadius)) ^ dart.notNull(dart.hashCode(this.margins)) ^ dart.notNull(dart.hashCode(this.maxWidth)) ^ dart.notNull(dart.hashCode(this.openMaxWidth)) ^ dart.hashCode(this.axisAlignment) ^ dart.hashCode(this.openAxisAlignment)) >>> 0;
    }
  };
  (search_bar_style.FloatingSearchBarStyle.new = function(opts) {
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    if (backgroundColor == null) dart.nullFailed(I[0], 23, 19, "backgroundColor");
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    if (shadowColor == null) dart.nullFailed(I[0], 24, 19, "shadowColor");
    let padding = opts && 'padding' in opts ? opts.padding : null;
    if (padding == null) dart.nullFailed(I[0], 25, 19, "padding");
    let insets = opts && 'insets' in opts ? opts.insets : null;
    if (insets == null) dart.nullFailed(I[0], 26, 19, "insets");
    let height = opts && 'height' in opts ? opts.height : null;
    if (height == null) dart.nullFailed(I[0], 27, 19, "height");
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    if (elevation == null) dart.nullFailed(I[0], 28, 19, "elevation");
    let backdropColor = opts && 'backdropColor' in opts ? opts.backdropColor : null;
    if (backdropColor == null) dart.nullFailed(I[0], 29, 19, "backdropColor");
    let border = opts && 'border' in opts ? opts.border : null;
    if (border == null) dart.nullFailed(I[0], 30, 19, "border");
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    if (borderRadius == null) dart.nullFailed(I[0], 31, 19, "borderRadius");
    let margins = opts && 'margins' in opts ? opts.margins : null;
    if (margins == null) dart.nullFailed(I[0], 32, 19, "margins");
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let openMaxWidth = opts && 'openMaxWidth' in opts ? opts.openMaxWidth : null;
    let axisAlignment = opts && 'axisAlignment' in opts ? opts.axisAlignment : null;
    if (axisAlignment == null) dart.nullFailed(I[0], 35, 19, "axisAlignment");
    let openAxisAlignment = opts && 'openAxisAlignment' in opts ? opts.openAxisAlignment : null;
    if (openAxisAlignment == null) dart.nullFailed(I[0], 36, 19, "openAxisAlignment");
    this[backgroundColor$] = backgroundColor;
    this[shadowColor$] = shadowColor;
    this[padding$] = padding;
    this[insets$] = insets;
    this[height$] = height;
    this[elevation$] = elevation;
    this[backdropColor$] = backdropColor;
    this[border$] = border;
    this[borderRadius$] = borderRadius;
    this[margins$] = margins;
    this[maxWidth$] = maxWidth;
    this[openMaxWidth$] = openMaxWidth;
    this[axisAlignment$] = axisAlignment;
    this[openAxisAlignment$] = openAxisAlignment;
    ;
  }).prototype = search_bar_style.FloatingSearchBarStyle.prototype;
  dart.addTypeTests(search_bar_style.FloatingSearchBarStyle);
  dart.addTypeCaches(search_bar_style.FloatingSearchBarStyle);
  dart.setMethodSignature(search_bar_style.FloatingSearchBarStyle, () => ({
    __proto__: dart.getMethods(search_bar_style.FloatingSearchBarStyle.__proto__),
    scaleTo: dart.fnType(search_bar_style.FloatingSearchBarStyle, [search_bar_style.FloatingSearchBarStyle, core.double])
  }));
  dart.setLibraryUri(search_bar_style.FloatingSearchBarStyle, I[1]);
  dart.setFieldSignature(search_bar_style.FloatingSearchBarStyle, () => ({
    __proto__: dart.getFields(search_bar_style.FloatingSearchBarStyle.__proto__),
    backgroundColor: dart.finalFieldType(ui.Color),
    shadowColor: dart.finalFieldType(ui.Color),
    backdropColor: dart.finalFieldType(ui.Color),
    padding: dart.finalFieldType(edge_insets.EdgeInsets),
    insets: dart.finalFieldType(edge_insets.EdgeInsets),
    margins: dart.finalFieldType(edge_insets.EdgeInsets),
    height: dart.finalFieldType(core.double),
    elevation: dart.finalFieldType(core.double),
    border: dart.finalFieldType(borders.BorderSide),
    borderRadius: dart.finalFieldType(border_radius.BorderRadius),
    maxWidth: dart.finalFieldType(dart.nullable(core.double)),
    openMaxWidth: dart.finalFieldType(dart.nullable(core.double)),
    axisAlignment: dart.finalFieldType(core.double),
    openAxisAlignment: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(search_bar_style.FloatingSearchBarStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(search_bar_style.FloatingSearchBarStyle, ['hashCode']);
  var accentColor$ = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.accentColor");
  var backgroundColor$0 = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.backgroundColor");
  var shadowColor$0 = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.shadowColor");
  var iconColor$ = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.iconColor");
  var colorOnScroll$ = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.colorOnScroll");
  var padding$0 = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.padding");
  var insets$0 = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.insets");
  var height$0 = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.height");
  var elevation$0 = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.elevation");
  var liftOnScrollElevation$ = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.liftOnScrollElevation");
  var hintStyle$ = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.hintStyle");
  var queryStyle$ = dart.privateName(search_bar_style, "FloatingSearchAppBarStyle.queryStyle");
  search_bar_style.FloatingSearchAppBarStyle = class FloatingSearchAppBarStyle extends core.Object {
    get accentColor() {
      return this[accentColor$];
    }
    set accentColor(value) {
      super.accentColor = value;
    }
    get backgroundColor() {
      return this[backgroundColor$0];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get shadowColor() {
      return this[shadowColor$0];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    get iconColor() {
      return this[iconColor$];
    }
    set iconColor(value) {
      super.iconColor = value;
    }
    get colorOnScroll() {
      return this[colorOnScroll$];
    }
    set colorOnScroll(value) {
      super.colorOnScroll = value;
    }
    get padding() {
      return this[padding$0];
    }
    set padding(value) {
      super.padding = value;
    }
    get insets() {
      return this[insets$0];
    }
    set insets(value) {
      super.insets = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    get elevation() {
      return this[elevation$0];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get liftOnScrollElevation() {
      return this[liftOnScrollElevation$];
    }
    set liftOnScrollElevation(value) {
      super.liftOnScrollElevation = value;
    }
    get hintStyle() {
      return this[hintStyle$];
    }
    set hintStyle(value) {
      super.hintStyle = value;
    }
    get queryStyle() {
      return this[queryStyle$];
    }
    set queryStyle(value) {
      super.queryStyle = value;
    }
    scaleTo(b, t) {
      if (b == null) dart.nullFailed(I[0], 133, 63, "b");
      if (t == null) dart.nullFailed(I[0], 133, 73, "t");
      return new search_bar_style.FloatingSearchAppBarStyle.new({height: dart.nullCheck(ui.lerpDouble(this.height, b.height, t)), elevation: dart.nullCheck(ui.lerpDouble(this.elevation, b.elevation, t)), liftOnScrollElevation: dart.nullCheck(ui.lerpDouble(this.liftOnScrollElevation, b.liftOnScrollElevation, t)), accentColor: dart.nullCheck(ui.Color.lerp(this.accentColor, b.accentColor, t)), backgroundColor: dart.nullCheck(ui.Color.lerp(this.backgroundColor, b.backgroundColor, t)), colorOnScroll: ui.Color.lerp(this.colorOnScroll, b.colorOnScroll, t), shadowColor: dart.nullCheck(ui.Color.lerp(this.shadowColor, b.shadowColor, t)), iconColor: dart.nullCheck(ui.Color.lerp(this.iconColor, b.iconColor, t)), insets: dart.nullCheck(edge_insets.EdgeInsets.lerp(this.insets, b.insets, t)), padding: dart.nullCheck(edge_insets.EdgeInsets.lerp(this.padding, b.padding, t)), hintStyle: text_style.TextStyle.lerp(this.hintStyle, b.hintStyle, t), queryStyle: text_style.TextStyle.lerp(this.queryStyle, b.queryStyle, t)});
    }
    toString() {
      return "FloatingSearchAppBarStyle(accentColor: " + dart.str(this.accentColor) + ", backgroundColor: " + dart.str(this.backgroundColor) + ", shadowColor: " + dart.str(this.shadowColor) + ", iconColor: " + dart.str(this.iconColor) + ", colorOnScroll: " + dart.str(this.colorOnScroll) + ", padding: " + dart.str(this.padding) + ", insets: " + dart.str(this.insets) + ", height: " + dart.str(this.height) + ", elevation: " + dart.str(this.elevation) + ", liftOnScrollElevation: " + dart.str(this.liftOnScrollElevation) + ", hintStyle: " + dart.str(this.hintStyle) + ", queryStyle: " + dart.str(this.queryStyle) + ")";
    }
    _equals(o) {
      if (o == null) return false;
      if (this === o) return true;
      return search_bar_style.FloatingSearchAppBarStyle.is(o) && dart.equals(o.accentColor, this.accentColor) && dart.equals(o.backgroundColor, this.backgroundColor) && dart.equals(o.shadowColor, this.shadowColor) && dart.equals(o.iconColor, this.iconColor) && dart.equals(o.colorOnScroll, this.colorOnScroll) && dart.equals(o.padding, this.padding) && dart.equals(o.insets, this.insets) && o.height == this.height && o.elevation == this.elevation && o.liftOnScrollElevation == this.liftOnScrollElevation && dart.equals(o.hintStyle, this.hintStyle) && dart.equals(o.queryStyle, this.queryStyle);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.accentColor)) ^ dart.notNull(dart.hashCode(this.backgroundColor)) ^ dart.notNull(dart.hashCode(this.shadowColor)) ^ dart.notNull(dart.hashCode(this.iconColor)) ^ dart.notNull(dart.hashCode(this.colorOnScroll)) ^ dart.notNull(dart.hashCode(this.padding)) ^ dart.notNull(dart.hashCode(this.insets)) ^ dart.hashCode(this.height) ^ dart.hashCode(this.elevation) ^ dart.hashCode(this.liftOnScrollElevation) ^ dart.notNull(dart.hashCode(this.hintStyle)) ^ dart.notNull(dart.hashCode(this.queryStyle))) >>> 0;
    }
  };
  (search_bar_style.FloatingSearchAppBarStyle.new = function(opts) {
    let accentColor = opts && 'accentColor' in opts ? opts.accentColor : null;
    if (accentColor == null) dart.nullFailed(I[0], 119, 19, "accentColor");
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    if (backgroundColor == null) dart.nullFailed(I[0], 120, 19, "backgroundColor");
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    if (shadowColor == null) dart.nullFailed(I[0], 121, 19, "shadowColor");
    let iconColor = opts && 'iconColor' in opts ? opts.iconColor : null;
    if (iconColor == null) dart.nullFailed(I[0], 122, 19, "iconColor");
    let colorOnScroll = opts && 'colorOnScroll' in opts ? opts.colorOnScroll : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    if (padding == null) dart.nullFailed(I[0], 124, 19, "padding");
    let insets = opts && 'insets' in opts ? opts.insets : null;
    if (insets == null) dart.nullFailed(I[0], 125, 19, "insets");
    let height = opts && 'height' in opts ? opts.height : null;
    if (height == null) dart.nullFailed(I[0], 126, 19, "height");
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    if (elevation == null) dart.nullFailed(I[0], 127, 19, "elevation");
    let liftOnScrollElevation = opts && 'liftOnScrollElevation' in opts ? opts.liftOnScrollElevation : null;
    if (liftOnScrollElevation == null) dart.nullFailed(I[0], 128, 19, "liftOnScrollElevation");
    let hintStyle = opts && 'hintStyle' in opts ? opts.hintStyle : null;
    let queryStyle = opts && 'queryStyle' in opts ? opts.queryStyle : null;
    this[accentColor$] = accentColor;
    this[backgroundColor$0] = backgroundColor;
    this[shadowColor$0] = shadowColor;
    this[iconColor$] = iconColor;
    this[colorOnScroll$] = colorOnScroll;
    this[padding$0] = padding;
    this[insets$0] = insets;
    this[height$0] = height;
    this[elevation$0] = elevation;
    this[liftOnScrollElevation$] = liftOnScrollElevation;
    this[hintStyle$] = hintStyle;
    this[queryStyle$] = queryStyle;
    ;
  }).prototype = search_bar_style.FloatingSearchAppBarStyle.prototype;
  dart.addTypeTests(search_bar_style.FloatingSearchAppBarStyle);
  dart.addTypeCaches(search_bar_style.FloatingSearchAppBarStyle);
  dart.setMethodSignature(search_bar_style.FloatingSearchAppBarStyle, () => ({
    __proto__: dart.getMethods(search_bar_style.FloatingSearchAppBarStyle.__proto__),
    scaleTo: dart.fnType(search_bar_style.FloatingSearchAppBarStyle, [search_bar_style.FloatingSearchAppBarStyle, core.double])
  }));
  dart.setLibraryUri(search_bar_style.FloatingSearchAppBarStyle, I[1]);
  dart.setFieldSignature(search_bar_style.FloatingSearchAppBarStyle, () => ({
    __proto__: dart.getFields(search_bar_style.FloatingSearchAppBarStyle.__proto__),
    accentColor: dart.finalFieldType(ui.Color),
    backgroundColor: dart.finalFieldType(ui.Color),
    shadowColor: dart.finalFieldType(ui.Color),
    iconColor: dart.finalFieldType(ui.Color),
    colorOnScroll: dart.finalFieldType(dart.nullable(ui.Color)),
    padding: dart.finalFieldType(edge_insets.EdgeInsets),
    insets: dart.finalFieldType(edge_insets.EdgeInsets),
    height: dart.finalFieldType(core.double),
    elevation: dart.finalFieldType(core.double),
    liftOnScrollElevation: dart.finalFieldType(core.double),
    hintStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    queryStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle))
  }));
  dart.defineExtensionMethods(search_bar_style.FloatingSearchAppBarStyle, ['toString', '_equals']);
  dart.defineExtensionAccessors(search_bar_style.FloatingSearchAppBarStyle, ['hashCode']);
  dart.trackLibraries("packages/material_floating_search_bar/src/search_bar_style.dart", {
    "package:material_floating_search_bar/src/search_bar_style.dart": search_bar_style
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["search_bar_style.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../S:/packages/material_floating_search_bar/src/search_bar_style.dart.lib.js"}');
  // Exports:
  return {
    src__search_bar_style: search_bar_style
  };
}));

//# sourceMappingURL=search_bar_style.dart.lib.js.map

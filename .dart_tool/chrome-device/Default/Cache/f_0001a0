define(['dart_sdk', 'packages/dio/src/interceptors/log.dart'], (function load__packages__pretty_dio_logger__pretty_dio_logger_dart(dart_sdk, packages__dio__src__interceptors__log$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const form_data = packages__dio__src__interceptors__log$46dart.src__form_data;
  const dio_error = packages__dio__src__interceptors__log$46dart.src__dio_error;
  const interceptor = packages__dio__src__interceptors__log$46dart.src__interceptor;
  const response = packages__dio__src__interceptors__log$46dart.src__response;
  const options = packages__dio__src__interceptors__log$46dart.src__options;
  var pretty_dio_logger = Object.create(dart.library);
  var $addAll = dartx.addAll;
  var $toString = dartx.toString;
  var $_set = dartx._set;
  var $addEntries = dartx.addEntries;
  var $times = dartx['*'];
  var $ceil = dartx.ceil;
  var $substring = dartx.substring;
  var $keys = dartx.keys;
  var $toList = dartx.toList;
  var $asMap = dartx.asMap;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $replaceAll = dartx.replaceAll;
  var $forEach = dartx.forEach;
  var $isEmpty = dartx.isEmpty;
  var $values = dartx.values;
  var $where = dartx.where;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ObjectNTovoid: () => (T.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T.ObjectN()])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    MapN: () => (T.MapN = dart.constFn(dart.nullable(core.Map)))(),
    IdentityMapOfString$String: () => (T.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    StringAndListOfStringTovoid: () => (T.StringAndListOfStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T.ListOfString()])))(),
    intAnddynamicTovoid: () => (T.intAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.int, dart.dynamic])))(),
    dynamicTobool: () => (T.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    dynamicAnddynamicTovoid: () => (T.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(core.print, T.ObjectNTovoid());
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/Users/dhruv/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/pretty_dio_logger-1.2.0-beta-1/lib/pretty_dio_logger.dart",
    "package:pretty_dio_logger/pretty_dio_logger.dart"
  ];
  var request$ = dart.privateName(pretty_dio_logger, "PrettyDioLogger.request");
  var requestHeader$ = dart.privateName(pretty_dio_logger, "PrettyDioLogger.requestHeader");
  var requestBody$ = dart.privateName(pretty_dio_logger, "PrettyDioLogger.requestBody");
  var responseBody$ = dart.privateName(pretty_dio_logger, "PrettyDioLogger.responseBody");
  var responseHeader$ = dart.privateName(pretty_dio_logger, "PrettyDioLogger.responseHeader");
  var error$ = dart.privateName(pretty_dio_logger, "PrettyDioLogger.error");
  var compact$ = dart.privateName(pretty_dio_logger, "PrettyDioLogger.compact");
  var maxWidth$ = dart.privateName(pretty_dio_logger, "PrettyDioLogger.maxWidth");
  var logPrint$ = dart.privateName(pretty_dio_logger, "PrettyDioLogger.logPrint");
  var _printRequestHeader = dart.privateName(pretty_dio_logger, "_printRequestHeader");
  var _printMapAsTable = dart.privateName(pretty_dio_logger, "_printMapAsTable");
  var _printBlock = dart.privateName(pretty_dio_logger, "_printBlock");
  var _printBoxed = dart.privateName(pretty_dio_logger, "_printBoxed");
  var _printResponse = dart.privateName(pretty_dio_logger, "_printResponse");
  var _printLine = dart.privateName(pretty_dio_logger, "_printLine");
  var _printResponseHeader = dart.privateName(pretty_dio_logger, "_printResponseHeader");
  var _printPrettyMap = dart.privateName(pretty_dio_logger, "_printPrettyMap");
  var _indent = dart.privateName(pretty_dio_logger, "_indent");
  var _printList = dart.privateName(pretty_dio_logger, "_printList");
  var _printKV = dart.privateName(pretty_dio_logger, "_printKV");
  var _canFlattenMap = dart.privateName(pretty_dio_logger, "_canFlattenMap");
  var _canFlattenList = dart.privateName(pretty_dio_logger, "_canFlattenList");
  pretty_dio_logger.PrettyDioLogger = class PrettyDioLogger extends interceptor.Interceptor {
    get request() {
      return this[request$];
    }
    set request(value) {
      super.request = value;
    }
    get requestHeader() {
      return this[requestHeader$];
    }
    set requestHeader(value) {
      super.requestHeader = value;
    }
    get requestBody() {
      return this[requestBody$];
    }
    set requestBody(value) {
      super.requestBody = value;
    }
    get responseBody() {
      return this[responseBody$];
    }
    set responseBody(value) {
      super.responseBody = value;
    }
    get responseHeader() {
      return this[responseHeader$];
    }
    set responseHeader(value) {
      super.responseHeader = value;
    }
    get error() {
      return this[error$];
    }
    set error(value) {
      super.error = value;
    }
    get compact() {
      return this[compact$];
    }
    set compact(value) {
      super.compact = value;
    }
    get maxWidth() {
      return this[maxWidth$];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get logPrint() {
      return this[logPrint$];
    }
    set logPrint(value) {
      this[logPrint$] = value;
    }
    onRequest(options, handler) {
      let t0, t0$;
      if (options == null) dart.nullFailed(I[0], 53, 33, "options");
      if (handler == null) dart.nullFailed(I[0], 53, 68, "handler");
      if (dart.test(this.request)) {
        this[_printRequestHeader](options);
      }
      if (dart.test(this.requestHeader)) {
        this[_printMapAsTable](options.queryParameters, {header: "Query Parameters"});
        let requestHeaders = new (T.IdentityMapOfString$dynamic()).new();
        requestHeaders[$addAll](options.headers);
        requestHeaders[$_set]("contentType", (t0 = options.contentType, t0 == null ? null : dart.toString(t0)));
        requestHeaders[$_set]("responseType", dart.toString(options.responseType));
        requestHeaders[$_set]("followRedirects", options.followRedirects);
        requestHeaders[$_set]("connectTimeout", options.connectTimeout);
        requestHeaders[$_set]("receiveTimeout", options.receiveTimeout);
        this[_printMapAsTable](requestHeaders, {header: "Headers"});
        this[_printMapAsTable](options.extra, {header: "Extras"});
      }
      if (dart.test(this.requestBody) && options.method !== "GET") {
        let data = options.data;
        if (data != null) {
          if (core.Map.is(data)) this[_printMapAsTable](T.MapN().as(options.data), {header: "Body"});
          if (form_data.FormData.is(data)) {
            let formDataMap = (t0$ = new (T.IdentityMapOfString$dynamic()).new(), (() => {
              t0$[$addEntries](data.fields);
              t0$[$addEntries](data.files);
              return t0$;
            })());
            this[_printMapAsTable](formDataMap, {header: "Form data | " + dart.str(data.boundary)});
          } else {
            this[_printBlock](dart.toString(data));
          }
        }
      }
      super.onRequest(options, handler);
    }
    onError(err, handler) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      if (err == null) dart.nullFailed(I[0], 87, 25, "err");
      if (handler == null) dart.nullFailed(I[0], 87, 54, "handler");
      if (dart.test(this.error)) {
        if (err.type == dio_error.DioErrorType.response) {
          let uri = (t0 = err.response, t0 == null ? null : t0.requestOptions.uri);
          this[_printBoxed]({header: "DioError ║ Status: " + dart.str((t0$ = err.response, t0$ == null ? null : t0$.statusCode)) + " " + dart.str((t0$0 = err.response, t0$0 == null ? null : t0$0.statusMessage)), text: dart.toString(uri)});
          if (err.response != null && (t0$1 = err.response, t0$1 == null ? null : t0$1.data) != null) {
            t0$2 = "╔ " + dart.str(dart.toString(err.type));
            this.logPrint(t0$2);
            this[_printResponse](dart.nullCheck(err.response));
          }
          this[_printLine]("╚");
          t0$3 = "";
          this.logPrint(t0$3);
        } else {
          this[_printBoxed]({header: "DioError ║ " + dart.str(err.type), text: err.message});
        }
      }
      super.onError(err, handler);
    }
    onResponse(response, handler) {
      let t0, t0$, t0$0;
      if (response == null) dart.nullFailed(I[0], 109, 28, "response");
      if (handler == null) dart.nullFailed(I[0], 109, 65, "handler");
      this[_printResponseHeader](response);
      if (dart.test(this.responseHeader)) {
        let responseHeaders = new (T.IdentityMapOfString$String()).new();
        response.headers.forEach(dart.fn((k, list) => {
          let t1, t0;
          if (k == null) dart.nullFailed(I[0], 114, 21, "k");
          if (list == null) dart.nullFailed(I[0], 114, 24, "list");
          t0 = k;
          t1 = dart.toString(list);
          responseHeaders[$_set](t0, t1);
          return t1;
        }, T.StringAndListOfStringTovoid()));
        this[_printMapAsTable](responseHeaders, {header: "Headers"});
      }
      if (dart.test(this.responseBody)) {
        t0 = "╔ Body";
        this.logPrint(t0);
        t0$ = "║";
        this.logPrint(t0$);
        this[_printResponse](response);
        t0$0 = "║";
        this.logPrint(t0$0);
        this[_printLine]("╚");
      }
      super.onResponse(response, handler);
    }
    [_printBoxed](opts) {
      let t0, t0$, t0$0;
      let header = opts && 'header' in opts ? opts.header : null;
      let text = opts && 'text' in opts ? opts.text : null;
      t0 = "";
      this.logPrint(t0);
      t0$ = "╔╣ " + dart.str(header);
      this.logPrint(t0$);
      t0$0 = "║  " + dart.str(text);
      this.logPrint(t0$0);
      this[_printLine]("╚");
    }
    [_printResponse](response) {
      let t0, t0$;
      if (response == null) dart.nullFailed(I[0], 135, 32, "response");
      if (response.data != null) {
        if (core.Map.is(response.data)) {
          this[_printPrettyMap](core.Map.as(response.data));
        } else if (core.List.is(response.data)) {
          t0 = "║" + dart.str(this[_indent]()) + "[";
          this.logPrint(t0);
          this[_printList](core.List.as(response.data));
          t0$ = "║" + dart.str(this[_indent]()) + "[";
          this.logPrint(t0$);
        } else {
          this[_printBlock](dart.toString(response.data));
        }
      }
    }
    [_printResponseHeader](response) {
      if (response == null) dart.nullFailed(I[0], 149, 38, "response");
      let uri = response.requestOptions.uri;
      let method = response.requestOptions.method;
      this[_printBoxed]({header: "Response ║ " + dart.str(method) + " ║ Status: " + dart.str(response.statusCode) + " " + dart.str(response.statusMessage), text: dart.toString(uri)});
    }
    [_printRequestHeader](options) {
      if (options == null) dart.nullFailed(I[0], 158, 43, "options");
      let uri = options.uri;
      let method = options.method;
      this[_printBoxed]({header: "Request ║ " + dart.str(method) + " ", text: dart.toString(uri)});
    }
    [_printLine](pre = "", suf = "╝") {
      let t0;
      if (pre == null) dart.nullFailed(I[0], 164, 27, "pre");
      if (suf == null) dart.nullFailed(I[0], 164, 44, "suf");
      t0 = dart.str(pre) + "═"[$times](this.maxWidth) + dart.str(suf);
      return this.logPrint(t0);
    }
    [_printKV](key, v) {
      let t0, t0$;
      let pre = "╟ " + dart.str(key) + ": ";
      let msg = dart.toString(v);
      if (pre.length + msg.length > dart.notNull(this.maxWidth)) {
        t0 = pre;
        this.logPrint(t0);
        this[_printBlock](msg);
      } else {
        t0$ = pre + dart.str(msg);
        this.logPrint(t0$);
      }
    }
    [_printBlock](msg) {
      let t0;
      if (msg == null) dart.nullFailed(I[0], 179, 27, "msg");
      let lines = (msg.length / dart.notNull(this.maxWidth))[$ceil]();
      for (let i = 0; i < lines; i = i + 1) {
        t0 = (i >= 0 ? "║ " : "") + msg[$substring](i * dart.notNull(this.maxWidth), math.min(core.int, i * dart.notNull(this.maxWidth) + dart.notNull(this.maxWidth), msg.length));
        this.logPrint(t0);
      }
    }
    [_indent](tabCount = 1) {
      if (tabCount == null) dart.nullFailed(I[0], 188, 23, "tabCount");
      return "    "[$times](tabCount);
    }
    [_printPrettyMap](data, opts) {
      let t0, t0$;
      if (data == null) dart.nullFailed(I[0], 191, 9, "data");
      let tabs = opts && 'tabs' in opts ? opts.tabs : 1;
      if (tabs == null) dart.nullFailed(I[0], 192, 9, "tabs");
      let isListItem = opts && 'isListItem' in opts ? opts.isListItem : false;
      if (isListItem == null) dart.nullFailed(I[0], 193, 10, "isListItem");
      let isLast = opts && 'isLast' in opts ? opts.isLast : false;
      if (isLast == null) dart.nullFailed(I[0], 194, 10, "isLast");
      let _tabs = tabs;
      let isRoot = _tabs === 1;
      let initialIndent = this[_indent](_tabs);
      _tabs = dart.notNull(_tabs) + 1;
      if (isRoot || dart.test(isListItem)) {
        t0 = "║" + dart.str(initialIndent) + "{";
        this.logPrint(t0);
      }
      data[$keys][$toList]()[$asMap]()[$forEach](dart.fn((index, key) => {
        let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
        if (index == null) dart.nullFailed(I[0], 203, 41, "index");
        let isLast = index === dart.notNull(data[$length]) - 1;
        let value = data[$_get](key);
        if (typeof value == 'string') {
          value = "\"" + dart.toString(value)[$replaceAll](core.RegExp.new("(\\r|\\n)+"), " ") + "\"";
        }
        if (core.Map.is(value)) {
          if (dart.test(this.compact) && dart.test(this[_canFlattenMap](value))) {
            t0 = "║" + dart.str(this[_indent](_tabs)) + " " + dart.str(key) + ": " + dart.str(value) + (!isLast ? "," : "");
            this.logPrint(t0);
          } else {
            t0$ = "║" + dart.str(this[_indent](_tabs)) + " " + dart.str(key) + ": {";
            this.logPrint(t0$);
            this[_printPrettyMap](value, {tabs: _tabs});
          }
        } else if (core.List.is(value)) {
          if (dart.test(this.compact) && dart.test(this[_canFlattenList](value))) {
            t0$0 = "║" + dart.str(this[_indent](_tabs)) + " " + dart.str(key) + ": " + dart.str(dart.toString(value));
            this.logPrint(t0$0);
          } else {
            t0$1 = "║" + dart.str(this[_indent](_tabs)) + " " + dart.str(key) + ": [";
            this.logPrint(t0$1);
            this[_printList](value, {tabs: _tabs});
            t0$2 = "║" + dart.str(this[_indent](_tabs)) + " ]" + (isLast ? "" : ",");
            this.logPrint(t0$2);
          }
        } else {
          let msg = dart.toString(value)[$replaceAll]("\n", "");
          let indent = this[_indent](_tabs);
          let linWidth = dart.notNull(this.maxWidth) - indent.length;
          if (msg.length + indent.length > linWidth) {
            let lines = (msg.length / linWidth)[$ceil]();
            for (let i = 0; i < lines; i = i + 1) {
              t0$3 = "║" + dart.str(this[_indent](_tabs)) + " " + msg[$substring](i * linWidth, math.min(core.int, i * linWidth + linWidth, msg.length));
              this.logPrint(t0$3);
            }
          } else {
            t0$4 = "║" + dart.str(this[_indent](_tabs)) + " " + dart.str(key) + ": " + msg + (!isLast ? "," : "");
            this.logPrint(t0$4);
          }
        }
      }, T.intAnddynamicTovoid()));
      t0$ = "║" + dart.str(initialIndent) + "}" + (dart.test(isListItem) && !dart.test(isLast) ? "," : "");
      this.logPrint(t0$);
    }
    [_printList](list, opts) {
      if (list == null) dart.nullFailed(I[0], 243, 24, "list");
      let tabs = opts && 'tabs' in opts ? opts.tabs : 1;
      if (tabs == null) dart.nullFailed(I[0], 243, 35, "tabs");
      list[$asMap]()[$forEach](dart.fn((i, e) => {
        let t0, t0$;
        if (i == null) dart.nullFailed(I[0], 244, 27, "i");
        let isLast = i === dart.notNull(list[$length]) - 1;
        if (core.Map.is(e)) {
          if (dart.test(this.compact) && dart.test(this[_canFlattenMap](e))) {
            t0 = "║" + dart.str(this[_indent](tabs)) + "  " + dart.str(e) + (!isLast ? "," : "");
            this.logPrint(t0);
          } else {
            this[_printPrettyMap](e, {tabs: dart.notNull(tabs) + 1, isListItem: true, isLast: isLast});
          }
        } else {
          t0$ = "║" + dart.str(this[_indent](dart.notNull(tabs) + 2)) + " " + dart.str(e) + (isLast ? "" : ",");
          this.logPrint(t0$);
        }
      }, T.intAnddynamicTovoid()));
    }
    [_canFlattenMap](map) {
      if (map == null) dart.nullFailed(I[0], 258, 27, "map");
      return dart.test(map[$values][$where](dart.fn(val => core.Map.is(val) || core.List.is(val), T.dynamicTobool()))[$isEmpty]) && dart.toString(map).length < dart.notNull(this.maxWidth);
    }
    [_canFlattenList](list) {
      if (list == null) dart.nullFailed(I[0], 265, 29, "list");
      return dart.notNull(list[$length]) < 10 && dart.toString(list).length < dart.notNull(this.maxWidth);
    }
    [_printMapAsTable](map, opts) {
      let t0;
      let header = opts && 'header' in opts ? opts.header : null;
      if (map == null || dart.test(map[$isEmpty])) return;
      t0 = "╔ " + dart.str(header) + " ";
      this.logPrint(t0);
      map[$forEach](dart.fn((key, value) => this[_printKV](dart.toString(key), value), T.dynamicAnddynamicTovoid()));
      this[_printLine]("╚");
    }
  };
  (pretty_dio_logger.PrettyDioLogger.new = function(opts) {
    let request = opts && 'request' in opts ? opts.request : true;
    if (request == null) dart.nullFailed(I[0], 42, 13, "request");
    let requestHeader = opts && 'requestHeader' in opts ? opts.requestHeader : false;
    if (requestHeader == null) dart.nullFailed(I[0], 43, 12, "requestHeader");
    let requestBody = opts && 'requestBody' in opts ? opts.requestBody : false;
    if (requestBody == null) dart.nullFailed(I[0], 44, 12, "requestBody");
    let responseHeader = opts && 'responseHeader' in opts ? opts.responseHeader : false;
    if (responseHeader == null) dart.nullFailed(I[0], 45, 12, "responseHeader");
    let responseBody = opts && 'responseBody' in opts ? opts.responseBody : true;
    if (responseBody == null) dart.nullFailed(I[0], 46, 12, "responseBody");
    let error = opts && 'error' in opts ? opts.error : true;
    if (error == null) dart.nullFailed(I[0], 47, 12, "error");
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 90;
    if (maxWidth == null) dart.nullFailed(I[0], 48, 12, "maxWidth");
    let compact = opts && 'compact' in opts ? opts.compact : true;
    if (compact == null) dart.nullFailed(I[0], 49, 12, "compact");
    let logPrint = opts && 'logPrint' in opts ? opts.logPrint : C[0] || CT.C0;
    if (logPrint == null) dart.nullFailed(I[0], 50, 12, "logPrint");
    this[request$] = request;
    this[requestHeader$] = requestHeader;
    this[requestBody$] = requestBody;
    this[responseHeader$] = responseHeader;
    this[responseBody$] = responseBody;
    this[error$] = error;
    this[maxWidth$] = maxWidth;
    this[compact$] = compact;
    this[logPrint$] = logPrint;
    ;
  }).prototype = pretty_dio_logger.PrettyDioLogger.prototype;
  dart.addTypeTests(pretty_dio_logger.PrettyDioLogger);
  dart.addTypeCaches(pretty_dio_logger.PrettyDioLogger);
  dart.setMethodSignature(pretty_dio_logger.PrettyDioLogger, () => ({
    __proto__: dart.getMethods(pretty_dio_logger.PrettyDioLogger.__proto__),
    [_printBoxed]: dart.fnType(dart.void, [], {header: dart.nullable(core.String), text: dart.nullable(core.String)}, {}),
    [_printResponse]: dart.fnType(dart.void, [response.Response]),
    [_printResponseHeader]: dart.fnType(dart.void, [response.Response]),
    [_printRequestHeader]: dart.fnType(dart.void, [options.RequestOptions]),
    [_printLine]: dart.fnType(dart.void, [], [core.String, core.String]),
    [_printKV]: dart.fnType(dart.void, [dart.nullable(core.String), dart.nullable(core.Object)]),
    [_printBlock]: dart.fnType(dart.void, [core.String]),
    [_indent]: dart.fnType(core.String, [], [core.int]),
    [_printPrettyMap]: dart.fnType(dart.void, [core.Map], {isLast: core.bool, isListItem: core.bool, tabs: core.int}, {}),
    [_printList]: dart.fnType(dart.void, [core.List], {tabs: core.int}, {}),
    [_canFlattenMap]: dart.fnType(core.bool, [core.Map]),
    [_canFlattenList]: dart.fnType(core.bool, [core.List]),
    [_printMapAsTable]: dart.fnType(dart.void, [dart.nullable(core.Map)], {header: dart.nullable(core.String)}, {})
  }));
  dart.setLibraryUri(pretty_dio_logger.PrettyDioLogger, I[1]);
  dart.setFieldSignature(pretty_dio_logger.PrettyDioLogger, () => ({
    __proto__: dart.getFields(pretty_dio_logger.PrettyDioLogger.__proto__),
    request: dart.finalFieldType(core.bool),
    requestHeader: dart.finalFieldType(core.bool),
    requestBody: dart.finalFieldType(core.bool),
    responseBody: dart.finalFieldType(core.bool),
    responseHeader: dart.finalFieldType(core.bool),
    error: dart.finalFieldType(core.bool),
    compact: dart.finalFieldType(core.bool),
    maxWidth: dart.finalFieldType(core.int),
    logPrint: dart.fieldType(dart.fnType(dart.void, [core.Object]))
  }));
  dart.defineLazy(pretty_dio_logger.PrettyDioLogger, {
    /*pretty_dio_logger.PrettyDioLogger.initialTab*/get initialTab() {
      return 1;
    },
    /*pretty_dio_logger.PrettyDioLogger.tabStep*/get tabStep() {
      return "    ";
    }
  }, false);
  dart.trackLibraries("packages/pretty_dio_logger/pretty_dio_logger.dart", {
    "package:pretty_dio_logger/pretty_dio_logger.dart": pretty_dio_logger
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["pretty_dio_logger.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../S:/packages/pretty_dio_logger/pretty_dio_logger.dart.lib.js"}');
  // Exports:
  return {
    pretty_dio_logger: pretty_dio_logger
  };
}));

//# sourceMappingURL=pretty_dio_logger.dart.lib.js.map
